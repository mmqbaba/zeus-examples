// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: hellodemo.proto

package hellodemo

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	_ "github.com/grpc-ecosystem/grpc-gateway/protoc-gen-swagger/options"
	_ "github.com/mwitkow/go-proto-validators"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	math "math"
)

import (
	context "context"
	client "github.com/micro/go-micro/client"
	server "github.com/micro/go-micro/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ client.Option
var _ server.Option

// Client API for HelloDemo service

type HelloDemoService interface {
	SayHello(ctx context.Context, in *HelloRequest, opts ...client.CallOption) (*HelloReply, error)
	Get(ctx context.Context, in *HelloRequest, opts ...client.CallOption) (*HelloReply, error)
	Put(ctx context.Context, in *HelloRequest, opts ...client.CallOption) (*HelloReply, error)
	Delete(ctx context.Context, in *HelloRequest, opts ...client.CallOption) (*HelloReply, error)
	PingPong(ctx context.Context, in *PingRequest, opts ...client.CallOption) (*PongReply, error)
	Upload(ctx context.Context, opts ...client.CallOption) (HelloDemo_UploadService, error)
}

type helloDemoService struct {
	c    client.Client
	name string
}

func NewHelloDemoService(name string, c client.Client) HelloDemoService {
	if c == nil {
		c = client.NewClient()
	}
	if len(name) == 0 {
		name = "hellodemo"
	}
	return &helloDemoService{
		c:    c,
		name: name,
	}
}

func (c *helloDemoService) SayHello(ctx context.Context, in *HelloRequest, opts ...client.CallOption) (*HelloReply, error) {
	req := c.c.NewRequest(c.name, "HelloDemo.SayHello", in)
	out := new(HelloReply)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *helloDemoService) Get(ctx context.Context, in *HelloRequest, opts ...client.CallOption) (*HelloReply, error) {
	req := c.c.NewRequest(c.name, "HelloDemo.Get", in)
	out := new(HelloReply)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *helloDemoService) Put(ctx context.Context, in *HelloRequest, opts ...client.CallOption) (*HelloReply, error) {
	req := c.c.NewRequest(c.name, "HelloDemo.Put", in)
	out := new(HelloReply)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *helloDemoService) Delete(ctx context.Context, in *HelloRequest, opts ...client.CallOption) (*HelloReply, error) {
	req := c.c.NewRequest(c.name, "HelloDemo.Delete", in)
	out := new(HelloReply)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *helloDemoService) PingPong(ctx context.Context, in *PingRequest, opts ...client.CallOption) (*PongReply, error) {
	req := c.c.NewRequest(c.name, "HelloDemo.PingPong", in)
	out := new(PongReply)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *helloDemoService) Upload(ctx context.Context, opts ...client.CallOption) (HelloDemo_UploadService, error) {
	req := c.c.NewRequest(c.name, "HelloDemo.Upload", &UploadReq{})
	stream, err := c.c.Stream(ctx, req, opts...)
	if err != nil {
		return nil, err
	}
	return &helloDemoServiceUpload{stream}, nil
}

type HelloDemo_UploadService interface {
	SendMsg(interface{}) error
	RecvMsg(interface{}) error
	Close() error
	Send(*UploadReq) error
}

type helloDemoServiceUpload struct {
	stream client.Stream
}

func (x *helloDemoServiceUpload) Close() error {
	return x.stream.Close()
}

func (x *helloDemoServiceUpload) SendMsg(m interface{}) error {
	return x.stream.Send(m)
}

func (x *helloDemoServiceUpload) RecvMsg(m interface{}) error {
	return x.stream.Recv(m)
}

func (x *helloDemoServiceUpload) Send(m *UploadReq) error {
	return x.stream.Send(m)
}

// Server API for HelloDemo service

type HelloDemoHandler interface {
	SayHello(context.Context, *HelloRequest, *HelloReply) error
	Get(context.Context, *HelloRequest, *HelloReply) error
	Put(context.Context, *HelloRequest, *HelloReply) error
	Delete(context.Context, *HelloRequest, *HelloReply) error
	PingPong(context.Context, *PingRequest, *PongReply) error
	Upload(context.Context, HelloDemo_UploadStream) error
}

func RegisterHelloDemoHandler(s server.Server, hdlr HelloDemoHandler, opts ...server.HandlerOption) error {
	type helloDemo interface {
		SayHello(ctx context.Context, in *HelloRequest, out *HelloReply) error
		Get(ctx context.Context, in *HelloRequest, out *HelloReply) error
		Put(ctx context.Context, in *HelloRequest, out *HelloReply) error
		Delete(ctx context.Context, in *HelloRequest, out *HelloReply) error
		PingPong(ctx context.Context, in *PingRequest, out *PongReply) error
		Upload(ctx context.Context, stream server.Stream) error
	}
	type HelloDemo struct {
		helloDemo
	}
	h := &helloDemoHandler{hdlr}
	return s.Handle(s.NewHandler(&HelloDemo{h}, opts...))
}

type helloDemoHandler struct {
	HelloDemoHandler
}

func (h *helloDemoHandler) SayHello(ctx context.Context, in *HelloRequest, out *HelloReply) error {
	return h.HelloDemoHandler.SayHello(ctx, in, out)
}

func (h *helloDemoHandler) Get(ctx context.Context, in *HelloRequest, out *HelloReply) error {
	return h.HelloDemoHandler.Get(ctx, in, out)
}

func (h *helloDemoHandler) Put(ctx context.Context, in *HelloRequest, out *HelloReply) error {
	return h.HelloDemoHandler.Put(ctx, in, out)
}

func (h *helloDemoHandler) Delete(ctx context.Context, in *HelloRequest, out *HelloReply) error {
	return h.HelloDemoHandler.Delete(ctx, in, out)
}

func (h *helloDemoHandler) PingPong(ctx context.Context, in *PingRequest, out *PongReply) error {
	return h.HelloDemoHandler.PingPong(ctx, in, out)
}

func (h *helloDemoHandler) Upload(ctx context.Context, stream server.Stream) error {
	return h.HelloDemoHandler.Upload(ctx, &helloDemoUploadStream{stream})
}

type HelloDemo_UploadStream interface {
	SendMsg(interface{}) error
	RecvMsg(interface{}) error
	Close() error
	Recv() (*UploadReq, error)
}

type helloDemoUploadStream struct {
	stream server.Stream
}

func (x *helloDemoUploadStream) Close() error {
	return x.stream.Close()
}

func (x *helloDemoUploadStream) SendMsg(m interface{}) error {
	return x.stream.Send(m)
}

func (x *helloDemoUploadStream) RecvMsg(m interface{}) error {
	return x.stream.Recv(m)
}

func (x *helloDemoUploadStream) Recv() (*UploadReq, error) {
	m := new(UploadReq)
	if err := x.stream.Recv(m); err != nil {
		return nil, err
	}
	return m, nil
}
