// Code generated by zeus-gen. DO NOT EDIT.
package http

import (
	"context"
	"log"

	gruntime "github.com/grpc-ecosystem/grpc-gateway/runtime"
	"google.golang.org/grpc"

	"gitlab.dg.com/BackEnd/jichuchanpin/tif/zeus/service"

	"zeus_app/hello/global"
	gw "zeus_app/hello/proto/gw"
)

func init() {
	// grpc gateway
	global.ServiceOpts = append(global.ServiceOpts, service.WithHttpGWhandlerRegisterFnOption(gwHandlerRegister))
	// http handler
	global.ServiceOpts = append(global.ServiceOpts, service.WithHttpHandlerRegisterFnOption(getHandlerRegisterFn()))
}

func gwHandlerRegister(ctx context.Context, endpoint string, opts []grpc.DialOption) (m *gruntime.ServeMux, err error) {
	optsTmp := opts
	mux := gruntime.NewServeMux()
	if len(opts) == 0 {
		optsTmp = []grpc.DialOption{grpc.WithInsecure()}
	}
	if err = gw.RegisterHelloHandlerFromEndpoint(ctx, mux, endpoint, optsTmp); err != nil {
		log.Println("gw.RegisterHelloHandlerFromEndpoint err:", err)
		return
	}
	m = mux
	return
}

func getHandlerRegisterFn() service.HttpHandlerRegisterFn {
	return serveHttpHandler
}

